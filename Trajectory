import matplotlib.pyplot as plt
import math,random
from collections import Counter
from sympy import Symbol,factor,expand,pprint,init_printing,solve,sympify
from sympy.plotting import plot
from matplotlib_venn import venn2
from sympy import FiniteSet
from matplotlib import animation

g = 9.8

def get_intervals(u,theta):
    
    t_flight = 2*u*math.sin(theta)/g
    intervals = []
    start = 0
    interval = 0.005
    while start < t_flight:
        intervals.append(start)
        start = start + interval
    return intervals


def update_position(i,circle, intervals, u, theta):
    
    t = intervals[i]
    x = u*math.cos(theta)*t
    y = u*math.sin(theta)*t - 0.5*g*t*t
    circle.center = x, y
    return circle,

def create_animation(u, theta):
    
    intervals =get_intervals(u, theta)
    print(intervals[-1])
    xmin = 0
    xmax = u*math.cos(theta)*intervals[-1]
    ymin = 0
    t_max = u*math.sin(theta)/g
    ymax = u*math.sin(theta)*t_max-0.5*g*t_max**2
    fig = plt.gcf()
    ax = plt.axes(xlim=(xmin,xmax), ylim=(ymin,ymax))
    ax.set_aspect('equal')

    circle = plt.Circle((xmin,ymin),0.5)
    ax.add_patch(circle)
    anim = animation.FuncAnimation(fig,update_position,
                        fargs = (circle, intervals, u, theta),
                        frames=len(intervals),interval=1,
                        repeat=True)
    plt.title('Simple Circle Animation')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.show()

if __name__=='__main__':
    #u = float(input('velocity:'))
    #theta = float(input('theta:'))
    u=9.8
    theta=45
    theta = math.radians(theta)
    create_animation(u,theta)
